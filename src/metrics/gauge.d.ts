// @generated by protobuf-ts 2.11.0 with parameter output_javascript
// @generated from protobuf file "pbf/metrics/gauge.proto" (package "metrics", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Result } from "./common";
import { Action } from "./common";
/**
 * GaugeI is the input for updating gauges.
 *
 * @generated from protobuf message metrics.GaugeI
 */
export interface GaugeI {
  /**
   * @generated from protobuf field: repeated metrics.Action action = 100
   */
  action: Action[];
}
/**
 * GaugeO is the output for updating gauges.
 *
 * @generated from protobuf message metrics.GaugeO
 */
export interface GaugeO {
  /**
   * @generated from protobuf field: repeated metrics.Result result = 100
   */
  result: Result[];
}
declare class GaugeI$Type extends MessageType<GaugeI> {
  constructor();
  create(value?: PartialMessage<GaugeI>): GaugeI;
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: GaugeI,
  ): GaugeI;
  internalBinaryWrite(
    message: GaugeI,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message metrics.GaugeI
 */
export declare const GaugeI: GaugeI$Type;
declare class GaugeO$Type extends MessageType<GaugeO> {
  constructor();
  create(value?: PartialMessage<GaugeO>): GaugeO;
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: GaugeO,
  ): GaugeO;
  internalBinaryWrite(
    message: GaugeO,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message metrics.GaugeO
 */
export declare const GaugeO: GaugeO$Type;
export {};
